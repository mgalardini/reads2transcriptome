#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Extract a fake self-orthology file"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'gbk2orths')
    parser.add_argument('ingbk', action='store',
                        help='Input GenBank file')

    parser.add_argument('--synonym', action='store_true',
        default=False,
        help='Use gene synonym identifier [Default: locus_tag]')
    parser.add_argument('--prefix', action='store',
        default='ECK',
        help='Gene synonym prefix [Default: ECK]')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    from Bio import SeqIO
    import sys
    options = get_options()

    print('#orth_id\tprot_id\torg_id')
    
    # Read the input gbk
    unnamed = 1
    orth_id = 1
    for s in SeqIO.parse(options.ingbk, 'genbank'):
        for f in filter(lambda x: x.type == 'CDS',
                        s.features):
            # Name
            if options.synonym:
                # If there's no synonim available
                # revert to the locus_tag
                if 'gene_synonym' not in f.qualifiers:
                    name = f.qualifiers['locus_tag'][0]
                    sys.stderr.write('No gene synonym! Using locus_tag (%s)\n'
                            %name)
                else:
                    name = list(filter(lambda x: x.strip().startswith(options.prefix),
                            f.qualifiers['gene_synonym'][0].split(';')))[0].strip()
            else:
                # Try first with the locus_tag
                # then the protein_id
                try:
                    name = f.qualifiers['locus_tag'][0]
                except:
                    name = 'unnamed_%d' % unnamed
                    unnamed += 1

            print('%d\t%s\treference' % (orth_id, name))
            print('%d\t%s\ttarget' % (orth_id, name))
            orth_id += 1
