#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name align_upstreams can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# align_upstreams nor may align_upstreams appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Extract putative transcripts from a genbank file"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'gbk2genes')
    parser.add_argument('ingff', action='store',
                        help='Input GFF file')

    parser.add_argument('--orthologs', action='store',
        default=None,
        help='Use 1:1 orthologs to rename transcripts')
    
    parser.add_argument('--synonym', action='store_true',
        default=False,
        help='Use gene synonym identifier [Default: locus_tag]')
    parser.add_argument('--prefix', action='store',
        default='ECK',
        help='Gene synonym prefix [Default: ECK]')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

def parse_orthologs(infile):
    d = {}
    for l in open(infile):
        if l.strip().startswith('#'):
            continue
        orth, prot, org = l.strip().split()
        d[orth] = d.get(orth, set())
        d[orth].add( (prot, org) )
    return d

def get_single_orthologs(infile):
    orths = {}
    d = parse_orthologs(infile)
    singles = [x for x in d
               if len(d[x]) == 2 and
               len({y[1] for y in d[x]}) == 2]
    for k in singles:
        reference = [x for x in d[k] if x[1] == 'reference'][0][0]
        target = [x for x in d[k] if x[1] == 'target'][0][0]
        
        orths[target] = reference
    
    return orths

if __name__ == "__main__":
    from BCBio import GFF
    import sys
    options = get_options()

    # Load the orthologs, if provided
    orthologs = {}
    if options.orthologs is not None:
        orthologs = get_single_orthologs(options.orthologs)
    
    # Read the input gbk
    unnamed = 1
    for s in GFF.parse(options.ingff):
        for f in filter(lambda x: x.type == 'gene',
                        s.features):
            # Name
            if options.synonym:
                # If there's no synonim available
                # revert to the locus_tag
                if 'gene_synonym' not in f.qualifiers:
                    name = f.qualifiers['locus_tag'][0]
                    sys.stderr.write('No gene synonym! Using locus_tag (%s)\n'
                            %name)
                else:
                    name = list(filter(lambda x: x.strip().startswith(options.prefix),
                            f.qualifiers['gene_synonym'][0].split(';')))[0].strip()
            else:
                # Try first with the locus_tag
                # then the protein_id
                try:
                    name = f.qualifiers['locus_tag'][0]
                except:
                    name = 'unnamed_%d' % unnamed
                    unnamed += 1

            # Use orthology, whenever possible
            name = orthologs.get(name, name)

            # Sequence
            seq = str(f.extract(s).seq)

            print('>%s\n%s' % (name, seq))
