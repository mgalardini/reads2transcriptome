#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Extract putative transcripts from a genbank file"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'gff2genes')
    parser.add_argument('ingff', action='store',
                        help='Input GFF file')

    parser.add_argument('--orthologs', action='store',
        default=None,
        help='Use 1:1 orthologs to rename transcripts')
    parser.add_argument('--allowed-orthologs', action='store',
        default=None,
        help='Only use this reference genes')
    parser.add_argument('--reference', action='store_true',
        default=False,
        help='Only output 1:1 orthologs, ignored with --allowed-orthologs')
    
    parser.add_argument('--synonym', action='store_true',
        default=False,
        help='Use gene synonym identifier [Default: locus_tag]')
    parser.add_argument('--prefix', action='store',
        default='ECK',
        help='Gene synonym prefix [Default: ECK]')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

def parse_orthologs(infile):
    d = {}
    for l in open(infile):
        if l.strip().startswith('#'):
            continue
        orth, prot, org = l.strip().split()
        d[orth] = d.get(orth, set())
        d[orth].add( (prot, org) )
    return d

def get_single_orthologs(infile, allowed=None):
    orths = {}
    d = parse_orthologs(infile)
    singles = [x for x in d
               if len(d[x]) == 2 and
               len({y[1] for y in d[x]}) == 2]
    for k in singles:
        reference = [x for x in d[k] if x[1] == 'reference'][0][0]
        target = [x for x in d[k] if x[1] == 'target'][0][0]
        
        if allowed is not None and reference not in allowed:
            continue

        orths[target] = reference
    
    return orths

if __name__ == "__main__":
    from BCBio import GFF
    import sys
    options = get_options()

    # Load the orthologs, if provided
    orthologs = {}
    if options.orthologs is not None:
        if options.allowed_orthologs is not None:
            allowed = {x.rstrip() for x in open(options.allowed_orthologs)}
        else:
            allowed = None
        orthologs = get_single_orthologs(options.orthologs, allowed=allowed)
   
    # if orthologs are used, genes should be in the same order in every strain
    genes = []

    # Read the input gbk
    unnamed = 1
    for s in GFF.parse(options.ingff):
        for f in filter(lambda x: x.type == 'gene',
                        s.features):
            # Name
            if options.synonym:
                # If there's no synonim available
                # revert to the locus_tag
                if 'gene_synonym' not in f.qualifiers:
                    name = f.qualifiers['locus_tag'][0]
                    sys.stderr.write('No gene synonym! Using locus_tag (%s)\n'
                            %name)
                else:
                    name = list(filter(lambda x: x.strip().startswith(options.prefix),
                            f.qualifiers['gene_synonym'][0].split(';')))[0].strip()
            else:
                # Try first with the locus_tag
                # then the protein_id
                try:
                    name = f.qualifiers['locus_tag'][0]
                except:
                    name = 'unnamed_%d' % unnamed
                    unnamed += 1

            if options.allowed_orthologs is not None:
                if name not in orthologs:
                    continue
            # Use orthology, whenever possible
            if options.allowed_orthologs is None and options.reference:
                if name not in orthologs:
                    continue
                name = orthologs[name]
            else:
                name = orthologs.get(name, name)

            # Sequence
            seq = str(f.extract(s).seq)

            if options.orthologs is None:
                print('>%s\n%s' % (name, seq))
            else:
                genes.append((name, seq))

    if options.orthologs is not None:
        for name, seq in sorted(genes, key=lambda x: x[0]):
            print('>%s\n%s' % (name, seq))
