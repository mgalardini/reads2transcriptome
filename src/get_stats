#!/usr/bin/env python
# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name reads2genome
# can be used to endorse or promote products derived from
# this software without prior written permission.
# For written permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called reads2genome
# nor may reads2genome appear in their names without prior written
# permission of the developers. You should have received a copy
# of the GNU General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse

    # create the top-level parser
    description = ("Get statistics from the transcriptome analysis\n" +
                  "The program expects a stdin stream of the unmapped reads.")
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'get_stats')

    parser.add_argument('name', action='store',
                        help='Strain name')
    parser.add_argument('forward', action='store',
                        help='Forward BAM file')
    parser.add_argument('reverse', action='store',
                        help='Reverse BAM file')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    options = get_options()

    import sys
    import pysam
    from Bio import SeqIO

    fmapped = reduce(lambda x, y: x + y,
            [ int(l.rstrip('\n').split('\t')[2])
                for l in pysam.idxstats(options.forward) ])
    rmapped = reduce(lambda x, y: x + y,
            [ int(l.rstrip('\n').split('\t')[2])
                for l in pysam.idxstats(options.reverse) ])

    unmapped = reduce(lambda x, y: x + y,
            [1 for x in SeqIO.parse(sys.stdin, 'fastq')])

    print('#name\ttotal\tforward\treverse\tunmapped')
    print('\t'.join([str(x) for x in [options.name,
                                      fmapped+rmapped+unmapped,
                                      fmapped,
                                      rmapped,
                                      unmapped]]))
